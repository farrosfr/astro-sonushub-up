---
import Layout from '../layouts/Layout.astro';
import { marked } from 'marked';
import mysql from 'mysql2/promise';
import Papa from 'papaparse';

const session = Astro.cookies.get('auth-session');
if (!session) {
    return Astro.redirect('/auth');
}


let dataUntukUpdate: any[] = [];
let rangkumanDariAI = 'Validasi AI tidak diaktifkan.';
let tokenDigunakan = '0';
const modelAI = 'gemini-2.5-flash'; // Ganti model jika perlu
let gunakanAI = false;
let error = null;

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const file = formData.get('fileCsv') as File;
    gunakanAI = formData.get('gunakan_ai') === 'yes';

    if (!file || file.size === 0) {
      throw new Error("File CSV tidak ditemukan atau kosong.");
    }

    const fileContent = await file.text();

    const firstLine = fileContent.split('\n')[0];
    const delimiter = (firstLine.match(/;/g) || []).length > (firstLine.match(/,/g) || []).length ? ';' : ',';

    const parsedCsv = Papa.parse(fileContent, {
      header: true,
      delimiter: delimiter,
      skipEmptyLines: true,
      transformHeader: (header) => header.trim(),
    });

    if (parsedCsv.errors.length) {
        console.error("CSV Parsing Errors:", parsedCsv.errors);
        throw new Error(`Gagal mem-parsing CSV: ${parsedCsv.errors.map(e => e.message).join(', ')}`);
    }

    const db = await mysql.createConnection({
      host: import.meta.env.DB_HOST,
      user: import.meta.env.DB_USER,
      password: import.meta.env.DB_PASSWORD,
      database: import.meta.env.DB_NAME,
    });

    for (const record of parsedCsv.data as any[]) {
      const idProduk = record.id_produk || record.ID;
      if (!idProduk) continue;

      const [variationRows]: any = await db.execute('SELECT price AS harga_lama, current_stock AS stock_lama FROM product_variations WHERE product_id = ?', [idProduk]);
      const [productRows]: any = await db.execute('SELECT unit AS unit_lama, min_qty AS min_qty_lama FROM products WHERE id = ?', [idProduk]);
      
      if (variationRows.length > 0 && productRows.length > 0) {
        dataUntukUpdate.push({
          id: idProduk,
          // Old values from DB for display
          harga_lama: variationRows[0].harga_lama,
          stock_lama: variationRows[0].stock_lama,
          unit_lama: productRows[0].unit_lama,
          min_qty_lama: productRows[0].min_qty_lama,
          // New values from CSV, editable by user
          harga_baru: record.harga_baru ?? variationRows[0].harga_lama,
          stock: record.stock ?? variationRows[0].stock_lama,
          unit: record.unit ?? productRows[0].unit_lama,
          min_qty: record.min_qty ?? productRows[0].min_qty_lama,
        });
      }
    }
    await db.end();

    if (dataUntukUpdate.length === 0) {
        throw new Error("Tidak ada produk yang cocok ditemukan di database dari file CSV yang diberikan.");
    }

    if (gunakanAI) {
      const dataTeks = dataUntukUpdate.map(item => `ID: ${item.id}, Harga Lama: ${item.harga_lama}, Harga Baru: ${item.harga_baru}, Stock: ${item.stock}, Unit: ${item.unit}, Min Qty: ${item.min_qty}`).join('\n');
      const prompt = `Anda adalah seorang analis data. Berikut adalah data perubahan harga, stok, dan kuantitas produk. Berikan rangkuman singkat, analisis potensi dampaknya (misal, kenaikan harga drastis, stok menipis), dan berikan saran atau peringatan jika ada yang terlihat tidak wajar. Fokus pada perubahan yang signifikan.\n\nData:\n${dataTeks}`;
      
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${import.meta.env.GEMINI_API_KEY}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [{ parts: [{ text: prompt }] }],
          generationConfig: { responseMimeType: 'text/plain' },
        }),
      });

      if (!response.ok) {
          const errorBody = await response.text();
          throw new Error(`AI API request failed with status ${response.status}: ${errorBody}`);
      }

      const aiResult = await response.json();
      rangkumanDariAI = aiResult.candidates?.[0]?.content?.parts?.[0]?.text || "Gagal mendapatkan rangkuman dari AI.";
      tokenDigunakan = aiResult.usageMetadata?.totalTokenCount || 'N/A';
    }

  } catch (e: any) {
    error = e.message;
  }
} else {
    return Astro.redirect('/');
}
---
<Layout title="Konfirmasi - SonusHUB Updater">
  <style>
    .hgroup-wrapper {
      text-align: center;
      margin-bottom: 2.5rem;
    }
    .confirmation-wrapper {
        max-width: 95%;
        margin: 0 auto;
    }
    .error-message {
        text-align: center;
        padding: 2rem;
    }
    .error-message h3 {
        color: var(--pico-del-color);
    }
    .table-responsive {
        overflow-x: auto;
    }
    table {
        margin-bottom: 2rem;
    }
    table th {
        color: var(--h3-color);
    }
    table tbody tr:nth-child(odd) {
        background-color: var(--form-element-background-color);
    }
    td small {
        display: block;
        font-size: 0.8em;
        opacity: 0.8;
        white-space: nowrap;
    }
    .price-old {
        text-decoration: line-through;
    }
    table input {
        min-width: 120px;
        margin-top: 0.25rem;
    }
    .ai-summary {
        border-top: 1px solid var(--card-border-color);
        padding-top: 2rem;
        margin-top: 2rem;
    }
    .ai-summary h3 {
        margin-top: 0;
    }
    .model-info {
        font-size: 0.9rem;
        text-align: right;
        opacity: 0.7;
        margin-top: 1rem;
    }
    footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 2.5rem;
        border-top: 1px solid var(--card-border-color);
        padding-top: 2rem;
    }
  </style>

<div class="confirmation-wrapper">
    <div class="hgroup-wrapper">
        <hgroup>
            <h2>Langkah 2: Konfirmasi Perubahan</h2>
            <p>Periksa dan ubah data di bawah ini sebelum menyimpan perubahan secara permanen.</p>
        </hgroup>
    </div>

    <article>
        {error ? (
          <div class="error-message">
            <h3>Terjadi Kesalahan</h3>
            <p>{error}</p>
            <a href="/" role="button" class="secondary">Coba Lagi</a>
          </div>
        ) : (
          <form id="confirmation-form" action="/api/update-data" method="post">
            
            <h3>Data yang Akan Diperbarui ({dataUntukUpdate.length} produk)</h3>
            <div class="table-responsive">
                <table>
                <thead>
                    <tr>
                    <th>ID Produk</th>
                    <th>Harga</th>
                    <th>Stock</th>
                    <th>Unit</th>
                    <th>Min. Qty</th>
                    </tr>
                </thead>
                <tbody>
                    {dataUntukUpdate.map(item => (
                    <tr data-id={item.id}>
                        <td><code>{item.id}</code></td>
                        <td>
                        <small class="price-old">{new Intl.NumberFormat('id-ID', { style: 'currency', currency: 'IDR', minimumFractionDigits: 0 }).format(item.harga_lama)}</small>
                        <input type="number" name="harga_baru" value={item.harga_baru} placeholder="Harga Baru" required />
                        </td>
                        <td>
                        <small>Lama: {item.stock_lama}</small>
                        <input type="number" name="stock" value={item.stock} placeholder="Stock Baru" required />
                        </td>
                        <td>
                        <small>Lama: {item.unit_lama}</small>
                        <input type="text" name="unit" value={item.unit} placeholder="Unit Baru" required />
                        </td>
                        <td>
                        <small>Lama: {item.min_qty_lama}</small>
                        <input type="number" name="min_qty" value={item.min_qty} placeholder="Min. Qty Baru" required />
                        </td>
                    </tr>
                    ))}
                </tbody>
                </table>
            </div>

            {gunakanAI && (
              <div class="ai-summary">
                <h3>üìù Rangkuman & Saran dari AI</h3>
                <div class="prose" set:html={marked.parse(rangkumanDariAI)} />
                <div class="model-info">
                  Model AI: <strong>{modelAI}</strong> | Token: <strong>{tokenDigunakan}</strong>
                </div>
              </div>
            )}
            
            <input type="hidden" name="data_update" id="data_update_hidden">

            <footer>
                <span>Total <strong>{dataUntukUpdate.length} produk</strong> akan diperbarui.</span>
                <div>
                    <a href="/" role="button" class="secondary outline">Batal</a>
                    <button type="submit">YA, SIMPAN PERUBAHAN</button>
                </div>
            </footer>
          </form>
        )}
    </article>
</div>
</Layout>

<script>
  const form = document.getElementById('confirmation-form');
  if (form) {
    const hiddenInput = document.getElementById('data_update_hidden') as HTMLInputElement;
    form.addEventListener('submit', () => {
      const updatedData: any[] = [];
      const rows = form.querySelectorAll('tbody tr');
      
      rows.forEach(row => {
        const id = (row as HTMLElement).dataset.id;
        const harga_baru = (row.querySelector('input[name="harga_baru"]') as HTMLInputElement).value;
        const stock = (row.querySelector('input[name="stock"]') as HTMLInputElement).value;
        const unit = (row.querySelector('input[name="unit"]') as HTMLInputElement).value;
        const min_qty = (row.querySelector('input[name="min_qty"]') as HTMLInputElement).value;
        
        updatedData.push({ 
          id, 
          harga_baru: Number(harga_baru), 
          stock: Number(stock), 
          unit, 
          min_qty: Number(min_qty) 
        });
      });
      
      hiddenInput.value = JSON.stringify(updatedData);
    });
  }
</script>