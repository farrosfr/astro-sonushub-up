---
import Layout from '../layouts/Layout.astro';
import { marked } from 'marked';
import mysql from 'mysql2/promise';
import Papa from 'papaparse';


let dataUntukUpdate: any[] = [];
let rangkumanDariAI = 'Validasi AI tidak diaktifkan.';
let tokenDigunakan = '0';
const modelAI = 'gemini-2.5-flash';
let gunakanAI = false;
let error = null;

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const file = formData.get('fileCsv') as File;
    gunakanAI = formData.get('gunakan_ai') === 'yes';

    const fileContent = await file.text();

    // Deteksi delimiter otomatis
    const firstLine = fileContent.split('\n')[0];
    const delimiter = (firstLine.match(/;/g) || []).length > (firstLine.match(/,/g) || []).length ? ';' : ',';

    const parsedCsv = Papa.parse(fileContent, {
      header: true,
      delimiter: delimiter,
      skipEmptyLines: true,
    });

    const db = await mysql.createConnection({
      host: import.meta.env.DB_HOST,
      user: import.meta.env.DB_USER,
      password: import.meta.env.DB_PASSWORD,
      database: import.meta.env.DB_NAME,
    });

    for (const record of parsedCsv.data as any[]) {
      const [rows]: any = await db.execute('SELECT price AS harga_lama FROM product_variations WHERE product_id = ?', [record.id_produk]);
      if (rows.length > 0) {
        dataUntukUpdate.push({
          id: record.id_produk,
          harga_lama: rows[0].harga_lama,
          harga_baru: record.harga_baru,
        });
      }
    }
    await db.end();

    if (gunakanAI && dataUntukUpdate.length > 0) {
      // Logika panggilan AI (disalin dari PHP dan diubah ke JS)
      const dataTeks = dataUntukUpdate.map(item => `ID: ${item.id}, Harga Lama: ${item.harga_lama}, Harga Baru: ${item.harga_baru}`).join('\n');
      const prompt = `Anda adalah seorang analis data... (prompt lengkap Anda di sini)`; // Masukkan prompt lengkap Anda
      
      const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${import.meta.env.GEMINI_API_KEY}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [{ parts: [{ text: prompt }] }],
          generationConfig: { responseMimeType: 'text/plain' },
        }),
      });

      const aiResult = await response.json();
      rangkumanDariAI = aiResult.candidates?.[0]?.content?.parts?.[0]?.text || "Gagal mendapatkan rangkuman dari AI.";
      tokenDigunakan = aiResult.usageMetadata?.totalTokenCount || 'N/A';
    }

  } catch (e: any) {
    error = e.message;
  }
}
---
<Layout title="Konfirmasi Update Harga">
  <main class="container">
    <article>
        <header>
            <h2>Langkah 2: Konfirmasi Perubahan</h2>
        </header>

        {error ? (
          <div class="error-message">
            <h3>Terjadi Error</h3>
            <p>{error}</p>
            <a href="/" role="button" class="secondary">Kembali</a>
          </div>
        ) : (
          <form action="/api/update-data" method="post">
            <table>
              </table>

            {gunakanAI && (
              <div class="ai-summary">
                <h3>üìù Rangkuman & Saran dari AI</h3>
                <div set:html={marked.parse(rangkumanDariAI)} />
              </div>
              <div class="model-info">
                  Model AI: <strong>{modelAI}</strong> | Token: <strong>{tokenDigunakan}</strong>
              </div>
            )}
            
            <input type="hidden" name="data_update" value={JSON.stringify(dataUntukUpdate)}>

            <footer>
              <a href="/" role="button" class="secondary">Batal</a>
              <button type="submit">YA, SIMPAN PERUBAHAN</button>
            </footer>
          </form>
        )}
    </article>
  </main>
</Layout>